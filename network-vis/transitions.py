# import
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
import math
from tarjan_algo import *

G = nx.MultiDiGraph()


edges = [ ('107811', '9515'), ('111107', '111123'), ('111107', '111139'), ('111107', '111155'), ('111107', '111203'), ('111107', '111219'), ('111107', '112131'), ('111123', '111107'), ('111123', '111155'), ('111123', '111219'), ('111139', '111107'), ('111139', '111155'), ('111139', '111219'), ('111155', '111107'), ('111155', '111123'), ('111155', '111139'), ('111155', '111219'), ('111203', '111219'), ('111217', '111219'), ('111219', '111107'), ('111219', '111123'), ('111219', '111139'), ('111219', '111155'), ('111219', '111217'), ('111619', '42243'), ('111619', '42275'), ('111651', '42019'), ('111651', '42275'), ('111651', '9507'), ('111651', '9515'), ('111875', '42243'), ('111875', '9475'), ('111907', '9515'), ('112131', '111107'), ('112131', '111619'), ('112131', '111651'), ('112131', '111875'), ('112131', '112163'), ('112131', '112419'), ('112131', '41987'), ('112131', '42019'), ('112131', '42243'), ('112131', '42275'), ('112131', '46083'), ('112131', '46339'), ('112163', '107811'), ('112163', '111651'), ('112163', '111907'), ('112163', '112419'), ('112163', '42019'), ('112163', '42275'), ('112163', '46115'), ('112163', '9507'), ('112419', '42275'), ('112419', '9507'), ('112419', '9515'), ('1312', '66852'), ('1312', '66853'), ('1312', '9504'), ('1313', '1312'), ('1313', '1317'), ('1313', '3360'), ('1313', '3361'), ('1316', '1312'), ('1317', '1312'), ('1317', '1313'), ('1317', '3361'), ('1317', '3365'), ('1317', '66853'), ('1317', '68901'), ('3360', '1312'), ('3361', '1312'), ('3361', '3360'), ('3365', '1312'), ('3365', '1317'), ('3365', '3360'), ('3365', '3361'), ('3365', '68901'), ('41987', '9475'), ('42019', '9475'), ('42019', '9507'), ('42243', '9475'), ('42243', '9483'), ('42243', '9507'), ('42275', '9475'), ('42275', '9483'), ('42275', '9507'), ('42275', '9515'), ('46083', '9475'), ('46115', '9507'), ('46339', '9475'), ('66848', '1312'), ('66852', '1312'), ('66852', '66853'), ('66853', '1312'), ('66853', '1316'), ('66853', '1317'), ('66853', '66848'), ('66853', '66852'), ('66853', '68901'), ('68897', '3360'), ('68901', '1312'), ('68901', '3360'), ('68901', '3361'), ('68901', '3365'), ('68901', '66853'), ('68901', '68897'), ('9475', '9483'), ('9475', '9505'), ('9483', '9475'), ('9483', '9505'), ('9483', '9507'), ('9483', '9515'), ('9504', '9506'), ('9505', '1313'), ('9505', '1317'), ('9505', '9509'), ('9506', '9250'), ('9507', '1313'), ('9507', '9483'), ('9507', '9505'), ('9507', '9509'), ('9507', '9515'), ('9509', '1317'), ('9511', '9509'), ('9515', '9483'), ('9515', '9505'), ('9515', '9507'), ('9515', '9509'), ('9515', '9511'), ('9515', '9519'), ('9519', '9509'), ]
edge_widths = [ 0.2, 0.893147, 2.14591, 2.68491, 0.2, 4.43411, 2.76495, 2.97259, 0.2, 0.893147, 1.29861, 0.2, 1.99176, 3.41888, 0.893147, 0.2, 2.76495, 0.2, 0.2, 3.9612, 2.97259, 0.893147, 3.5322, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.29861, 0.2, 1.99176, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.58629, 0.2, 0.2, 0.2, 0.2, 0.2, 1.29861, 0.2, 0.2, 0.2, 1.29861, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.58629, 1.80944, 0.2, 1.58629, 0.2, 1.58629, 0.2, 0.2, 0.2, 0.893147, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.80944, 0.2, 0.2, 0.2, 0.2, 1.58629, 0.893147, 1.29861, 0.2, 0.893147, 0.2, 1.58629, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.2, 1.29861, 0.2, 0.2, 0.2, 0.2, 2.14591, 0.2, 1.58629, 0.893147, 0.893147, 0.2, 0.2, 0.2, 1.29861, 0.2, 0.893147, 1.99176, 0.2, 1.80944, 1.80944, 1.29861, 0.893147, 0.2, 0.2, 0.2, ]
nodes = [ '1312', '1313', '1316', '1317', '3360', '3361', '3365', '9250', '9475', '9483', '9504', '9505', '9506', '9507', '9509', '9511', '9515', '9519', '41987', '42019', '42243', '42275', '46083', '46115', '46339', '66848', '66852', '66853', '68897', '68901', '107811', '111107', '111123', '111139', '111155', '111203', '111217', '111219', '111619', '111651', '111875', '111907', '112131', '112163', '112419', ]
node_sizes = [ 1319.1, 2.1, 0.1, 9.4, 4.3, 1.4, 2.4, 112.2, 0.5, 7, 0.4, 1.6, 0.2, 1.2, 1.2, 0.1, 6.9, 0.2, 0.1, 0.3, 0.3, 1.2, 0.1, 0.1, 0.1, 0.1, 2.3, 26.6, 0.1, 7.3, 0.1, 666.9, 4.2, 1.8, 8.2, 0.1, 0.3, 110.1, 0.2, 0.6, 0.1, 0.1, 28.8, 1.6, 0.1, ]

print(len(edges))

# extra pruning algorithm. Only used for inductive organisms to get better look
# for i in range(len(edge_widths) -1, -1, -1):
#     if edge_widths[i] < 1:
#         del edge_widths[i]
#         del edges[i]





G.add_nodes_from(nodes)

for i in range(len(edges)):
    G.add_edge(edges[i][0], edges[i][1], width = edge_widths[i])


node_d = {}
for i in range(len(nodes)):
    val = math.sqrt(node_sizes[i])
    val = val * 2
    node_d[nodes[i]] = val

nx.set_node_attributes(G, node_d, 'size')

net = Network(directed=True)
net.repulsion()
net.from_nx(G)
net.show('transitions.html')


CellStates(nodes, edges, node_sizes)



# pos = nx.nx_agraph.graphviz_layout(G)
# nx.draw_networkx_nodes(G, pos, node_size = node_sizes)
# nx.draw_networkx_edges(G, pos, edgelist=G.edges(), nodelist=node_sizes) #, width=edge_widths, connectionstyle='arc3, rad = 0.1') #, nodelist=node_sizes)
# nx.draw_networkx_labels(G,pos)
# plt.show()



