# import
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
import math
from tarjan_algo import *

G = nx.MultiDiGraph()


edges = [ ('109191', '43655'), ('109303', '43655'), ('109303', '43735'), ('109303', '43767'), ('109311', '110335'), ('109311', '43767'), ('109311', '43775'), ('109447', '109191'), ('109447', '43655'), ('109447', '43911'), ('110215', '109191'), ('110215', '43655'), ('110326', '110334'), ('110327', '109191'), ('110327', '109303'), ('110327', '110215'), ('110327', '43655'), ('110327', '43767'), ('110327', '44679'), ('110327', '44791'), ('110334', '44798'), ('110334', '44799'), ('110335', '109303'), ('110335', '109311'), ('110335', '110326'), ('110335', '110327'), ('110335', '110334'), ('110335', '110591'), ('110335', '126719'), ('110335', '43767'), ('110335', '43775'), ('110335', '44799'), ('110335', '45055'), ('110471', '109191'), ('110471', '109447'), ('110471', '110215'), ('110471', '110487'), ('110471', '126855'), ('110471', '126871'), ('110471', '43911'), ('110479', '110471'), ('110479', '126879'), ('110487', '109191'), ('110487', '109447'), ('110487', '110215'), ('110487', '110471'), ('110487', '126871'), ('110495', '110479'), ('110559', '110479'), ('110591', '110495'), ('110591', '110559'), ('110591', '45055'), ('124823', '126871'), ('124823', '92055'), ('126719', '110335'), ('126855', '126871'), ('126855', '92055'), ('126871', '110487'), ('126871', '124823'), ('126871', '92055'), ('126879', '126871'), ('43654', '43655'), ('43654', '43670'), ('43654', '43671'), ('43654', '43678'), ('43654', '43679'), ('43654', '43735'), ('43654', '43766'), ('43654', '43767'), ('43654', '43774'), ('43654', '43775'), ('43654', '44678'), ('43655', '43654'), ('43655', '43670'), ('43655', '43671'), ('43655', '43703'), ('43655', '43734'), ('43655', '43735'), ('43655', '43766'), ('43655', '43767'), ('43655', '43774'), ('43655', '43775'), ('43655', '43911'), ('43655', '44678'), ('43663', '43655'), ('43670', '43766'), ('43670', '43767'), ('43671', '43655'), ('43671', '43766'), ('43671', '43767'), ('43671', '43774'), ('43671', '43775'), ('43678', '43774'), ('43679', '43775'), ('43703', '43767'), ('43734', '43766'), ('43734', '43774'), ('43734', '43775'), ('43735', '43655'), ('43735', '43766'), ('43735', '43767'), ('43735', '43774'), ('43735', '43775'), ('43766', '43654'), ('43766', '43655'), ('43766', '43767'), ('43766', '43774'), ('43766', '43775'), ('43767', '43654'), ('43767', '43655'), ('43767', '43671'), ('43767', '43735'), ('43767', '43766'), ('43767', '43774'), ('43767', '43775'), ('43774', '43766'), ('43774', '43767'), ('43774', '43775'), ('43775', '109311'), ('43775', '110335'), ('43775', '43655'), ('43775', '43663'), ('43775', '43671'), ('43775', '43735'), ('43775', '43766'), ('43775', '43767'), ('43775', '43774'), ('43775', '44798'), ('43775', '44799'), ('43775', '8959'), ('43775', '9983'), ('43911', '110471'), ('43911', '43655'), ('43911', '44935'), ('44678', '43654'), ('44678', '43655'), ('44678', '43766'), ('44678', '43774'), ('44678', '44790'), ('44679', '44791'), ('44790', '43774'), ('44791', '43655'), ('44791', '43767'), ('44798', '43774'), ('44798', '43775'), ('44799', '109311'), ('44799', '110334'), ('44799', '110335'), ('44799', '43767'), ('44799', '43775'), ('44799', '44798'), ('44935', '110471'), ('44943', '44935'), ('44959', '44943'), ('45055', '110495'), ('45055', '44959'), ('75519', '110335'), ('8959', '43775'), ('92038', '92039'), ('92039', '92038'), ('92055', '110487'), ('92055', '124823'), ('92055', '126871'), ('92055', '92039'), ('92055', '92119'), ('92119', '92055'), ('9983', '110335'), ('9983', '75519'), ]
edge_widths = [ 2.14591, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.893147, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.2, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.58629, 1.80944, 0.2, 0.2, 2.97259, 2.97259, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 2.14591, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 2.97259, 0.2, 2.14591, 0.2, 3.6012, 0.2, 3.14444, 0.2, 0.2, 0.2, 0.2, 0.2, 2.39722, 2.5979, 3.03321, 3.14444, 0.2, 4.4485, 0.2, 0.893147, 0.2, 0.2, 0.2, 2.76495, 3.9612, 2.14591, 3.14444, 3.81092, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.2, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 2.14591, 2.50259, 2.76495, 0.2, 5.06753, 0.893147, 0.2, 2.14591, 1.58629, 3.29104, 0.2, 0.893147, 4.0712, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 4.81512, 2.68491, 0.2, 1.58629, 0.2, 0.2, 1.80944, 1.29861, 3.6012, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 1.29861, 0.2, 0.2, 0.2, 3.6012, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 3.09037, 3.19573, 0.2, 0.2, 1.99176, 3.19573, 3.33549, 3.29104, 0.2, 0.2, ]
nodes = [ '8959', '9983', '43654', '43655', '43663', '43670', '43671', '43678', '43679', '43703', '43734', '43735', '43766', '43767', '43774', '43775', '43911', '44678', '44679', '44790', '44791', '44798', '44799', '44935', '44943', '44959', '45055', '75519', '92038', '92039', '92055', '92119', '109191', '109303', '109311', '109447', '110215', '110326', '110327', '110334', '110335', '110471', '110479', '110487', '110495', '110559', '110591', '124823', '126719', '126855', '126871', '126879', ]
node_sizes = [ 0.1, 0.1, 21.5, 647.3, 0.1, 0.1, 0.9, 0.1, 0.1, 0.1, 0.1, 0.5, 6.4, 72.2, 15.3, 82.3, 25.6, 0.2, 0.1, 0.1, 0.1, 0.4, 1, 6, 0.1, 0.1, 0.1, 0.1, 96.3, 1243.1, 121.6, 23, 2, 0.1, 1, 1.4, 0.1, 0.1, 0.5, 0.2, 2.9, 33.3, 0.2, 3.4, 0.1, 0.1, 0.3, 0.1, 1, 3.2, 15.3, 0.1, ]


print(len(edges))

# extra pruning algorithm. Only used for inductive organisms to get better look
# for i in range(len(edge_widths) -1, -1, -1):
#     if edge_widths[i] < 1.5:
#         del edge_widths[i]
#         del edges[i]





G.add_nodes_from(nodes)

for i in range(len(edges)):
    G.add_edge(edges[i][0], edges[i][1], width = edge_widths[i])


node_d = {}
for i in range(len(nodes)):
    val = math.sqrt(node_sizes[i])
    val = val * 2
    node_d[nodes[i]] = val

nx.set_node_attributes(G, node_d, 'size')

net = Network(directed=True)
net.repulsion()
net.from_nx(G)
net.show('transitions.html')


CellStates(nodes, edges, node_sizes)



# pos = nx.nx_agraph.graphviz_layout(G)
# nx.draw_networkx_nodes(G, pos, node_size = node_sizes)
# nx.draw_networkx_edges(G, pos, edgelist=G.edges(), nodelist=node_sizes) #, width=edge_widths, connectionstyle='arc3, rad = 0.1') #, nodelist=node_sizes)
# nx.draw_networkx_labels(G,pos)
# plt.show()



