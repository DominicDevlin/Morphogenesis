# import
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
import math

## BUG IN LIMIT CYCLE - USE PLURI59. NEED TO POOL THEM TOGETHER TO CREATE ONE LIMIT CYCLE
edges = [(256, 493), (128, 463), (463, 493), (384, 493), (64, 173), (173, 140), (140, 173), (140, 0), (320, 173), (140, 172), (172, 140), (192, 493), (448, 493), (32, 140), (288, 173), (160, 463), (416, 165), (165, 463), (96, 173), (173, 493), (352, 173), (224, 173), (480, 493), (16, 0), (272, 165), (165, 140), (173, 172), (144, 463), (400, 229), (229, 493), (80, 203), (203, 493), (336, 173), (140, 168), (168, 140), (208, 493), (464, 493), (48, 493), (304, 493), (176, 207), (207, 463), (432, 165), (112, 493), (368, 189), (189, 173), (240, 463), (496, 493), (8, 173), (264, 173), (136, 493), (392, 493), (72, 173), (328, 173), (200, 493), (456, 493), (40, 173), (296, 173), (168, 493), (424, 173), (104, 173), (360, 173), (232, 173), (488, 173), (24, 493), (280, 172), (172, 493), (152, 493), (408, 173), (88, 185), (185, 173), (344, 173), (216, 203), (472, 493), (56, 173), (312, 173), (184, 463), (440, 165), (165, 204), (204, 493), (120, 140), (376, 189), (248, 493), (504, 173), (4, 172), (260, 493), (132, 493), (388, 493), (68, 173), (324, 493), (196, 493), (452, 493), (36, 172), (292, 173), (164, 463), (420, 493), (100, 493), (356, 173), (140, 493), (228, 493), (484, 493), (20, 0), (276, 172), (148, 493), (404, 493), (84, 173), (340, 493), (212, 493), (468, 493), (52, 493), (308, 173), (180, 207), (436, 463), (116, 493), (372, 173), (244, 493), (500, 493), (12, 140), (268, 172), (396, 493), (76, 173), (332, 173), (460, 493), (44, 172), (300, 172), (428, 173), (108, 173), (364, 173), (236, 493), (492, 493), (28, 132), (284, 493), (156, 0), (0, 140), (412, 140), (92, 173), (348, 173), (220, 493), (476, 493), (60, 172), (316, 172), (188, 493), (444, 493), (124, 140), (380, 173), (252, 463), (508, 173), (2, 140), (258, 493), (130, 463), (386, 493), (66, 493), (322, 509), (509, 493), (194, 463), (450, 493), (34, 140), (290, 173), (162, 463), (418, 493), (98, 493), (354, 173), (226, 493), (482, 493), (18, 8), (8, 140), (274, 173), (146, 207), (402, 493), (82, 493), (338, 173), (210, 463), (466, 493), (50, 173), (306, 173), (178, 207), (434, 493), (114, 463), (370, 189), (242, 463), (498, 173), (10, 140), (266, 173), (138, 173), (394, 493), (74, 173), (330, 173), (202, 493), (458, 493), (42, 169), (169, 173), (298, 173), (170, 140), (426, 173), (106, 173), (362, 173), (234, 173), (490, 493), (26, 140), (282, 173), (154, 140), (410, 173), (90, 155), (155, 139), (139, 203), (346, 173), (218, 173), (474, 493), (58, 185), (185, 493), (314, 173), (186, 140), (442, 173), (122, 140), (378, 189), (250, 493), (506, 173), (6, 173), (262, 364), (364, 493), (134, 493), (390, 493), (70, 493), (326, 493), (198, 463), (454, 493), (38, 172), (294, 493), (166, 207), (422, 493), (102, 493), (358, 509), (230, 493), (486, 493), (22, 173), (278, 493), (150, 173), (406, 493), (86, 493), (342, 493), (214, 463), (470, 493), (54, 172), (310, 140), (182, 207), (438, 493), (118, 493), (374, 173), (246, 493), (502, 493), (14, 173), (270, 493), (142, 173), (398, 493), (78, 173), (334, 173), (206, 493), (462, 493), (46, 140), (302, 172), (174, 173), (430, 173), (110, 173), (366, 173), (238, 493), (494, 493), (30, 8), (8, 168), (168, 173), (286, 172), (158, 173), (414, 172), (94, 173), (350, 173), (222, 493), (478, 493), (62, 140), (318, 172), (190, 140), (446, 173), (126, 203), (382, 173), (254, 493), (510, 493), (1, 493), (257, 493), (129, 207), (385, 493), (65, 493), (321, 493), (193, 463), (449, 493), (33, 493), (289, 173), (161, 207), (417, 173), (97, 493), (353, 173), (225, 493), (481, 493), (17, 203), (273, 173), (145, 207), (401, 493), (81, 203), (337, 173), (209, 463), (465, 493), (49, 173), (305, 173), (177, 207), (433, 165), (113, 463), (369, 189), (241, 207), (497, 173), (9, 169), (265, 173), (137, 203), (393, 173), (73, 203), (329, 173), (201, 493), (457, 493), (41, 173), (297, 173), (425, 173), (105, 173), (361, 173), (233, 207), (489, 173), (25, 169), (281, 173), (153, 203), (409, 173), (89, 139), (345, 173), (217, 493), (473, 493), (57, 173), (313, 173), (441, 173), (121, 203), (377, 189), (249, 207), (505, 173), (5, 493), (261, 493), (133, 493), (389, 493), (69, 463), (325, 493), (197, 463), (453, 493), (37, 140), (293, 173), (421, 173), (101, 493), (357, 173), (229, 463), (485, 493), (21, 493), (277, 172), (149, 493), (405, 493), (85, 463), (341, 493), (213, 463), (469, 493), (53, 140), (309, 173), (181, 493), (437, 173), (117, 463), (373, 173), (245, 463), (501, 493), (13, 173), (269, 172), (172, 173), (141, 493), (397, 493), (77, 493), (333, 493), (205, 493), (461, 493), (45, 172), (301, 172), (429, 173), (109, 140), (365, 173), (237, 493), (29, 493), (285, 172), (157, 493), (413, 173), (93, 203), (349, 493), (221, 493), (477, 493), (61, 172), (317, 172), (189, 493), (445, 173), (125, 139), (381, 173), (253, 207), (207, 493), (509, 173), (3, 493), (259, 493), (131, 207), (387, 493), (67, 493), (323, 493), (195, 463), (451, 493), (35, 493), (291, 173), (163, 207), (419, 173), (99, 493), (355, 173), (227, 463), (483, 493), (19, 203), (275, 173), (147, 207), (403, 237), (83, 493), (339, 509), (211, 463), (467, 493), (51, 493), (307, 173), (179, 207), (435, 173), (115, 463), (371, 189), (243, 463), (499, 173), (11, 493), (267, 173), (395, 493), (75, 493), (331, 493), (459, 493), (43, 169), (169, 140), (299, 173), (171, 493), (427, 173), (107, 493), (363, 173), (235, 495), (495, 493), (491, 493), (27, 138), (138, 140), (283, 173), (155, 203), (411, 173), (91, 203), (347, 173), (219, 493), (475, 493), (59, 185), (315, 173), (187, 493), (443, 173), (123, 155), (379, 189), (251, 207), (507, 173), (7, 493), (263, 493), (135, 493), (391, 493), (71, 463), (327, 493), (199, 463), (455, 493), (39, 493), (295, 493), (167, 207), (423, 493), (103, 463), (359, 509), (231, 463), (487, 493), (23, 493), (279, 493), (151, 493), (407, 463), (87, 463), (343, 493), (215, 463), (471, 493), (55, 140), (311, 493), (183, 493), (439, 493), (119, 493), (375, 173), (247, 463), (503, 493), (15, 493), (271, 493), (143, 493), (399, 493), (79, 493), (335, 493), (47, 140), (303, 172), (175, 493), (431, 173), (111, 493), (367, 173), (239, 463), (31, 173), (287, 172), (159, 493), (415, 237), (95, 493), (351, 493), (223, 463), (479, 493), (63, 140), (319, 172), (191, 140), (447, 173), (127, 203), (383, 173), (255, 463), (511, 493), (173, 12), (173, 168), (173, 8), (173, 136), (172, 136), (172, 168), (172, 12), (172, 76), (172, 8), (172, 204), (140, 136), (140, 8), (140, 204), (140, 76), (140, 12), (168, 172), (168, 204), (168, 136), (168, 12), (168, 8), (140, 492), (140, 428), (173, 204), (12, 136), (12, 172), (12, 173), (12, 168), (168, 76), (140, 44), (172, 44), (12, 8), (12, 76), (8, 172), (8, 204), (8, 136), (136, 168), (136, 172), (136, 173), (136, 140), (136, 12), (136, 204), (136, 8), (12, 204), (172, 132), (172, 300), (492, 173), (492, 140), (492, 204), (492, 172), (492, 12), (492, 76), (492, 168), (492, 8), (492, 136), (8, 12), (172, 428), (173, 40), (173, 76), (140, 40), (76, 12), (76, 172), (76, 140), (76, 136), (76, 168), (172, 492), (136, 40)]



attractors = {(0,): 9, (493,): 340, (8, 12, 136, 140, 168, 172, 173): 22, (8, 12, 76, 136, 140, 168, 172, 173): 10, (12, 136, 140, 168, 172, 173, 204): 9, (8, 76, 136, 140, 168, 172, 173, 204): 1, (8, 12, 140, 168, 172, 173): 13, (8, 12, 136, 140, 168, 172, 173, 204): 42, (8, 12, 76, 136, 140, 168, 172, 173, 204): 5, (8, 12, 76, 140, 168, 172, 173): 6, (8, 136, 140, 168, 172, 173): 6, (12, 76, 136, 140, 168, 172, 173, 428, 492): 1, (12, 136, 140, 168, 172, 173): 6, (8, 12, 44, 140, 168, 172, 173): 1, (136, 140, 168, 172, 173, 204): 1, (8, 12, 140, 168, 172, 173, 204): 5, (12, 76, 140, 168, 172, 173, 204): 1, (8, 136, 140, 168, 172, 173, 204): 7, (8, 12, 44, 136, 140, 168, 172, 173): 1, (8, 12, 76, 140, 168, 172, 173, 204): 2, (12, 76, 136, 140, 168, 172, 173, 428): 1, (12, 140, 168, 172, 173): 1, (8, 12, 76, 132, 136, 140, 168, 172, 173, 300): 1, (8, 12, 76, 136, 140, 168, 172, 173, 204, 492): 1, (8, 76, 136, 140, 168, 172, 173): 1, (8, 12, 76, 136, 140, 168, 172, 173, 428): 3, (8, 12, 40, 136, 140, 168, 172, 173, 204): 3, (8, 76, 136, 140, 168, 172, 173, 204, 428): 3, (12, 76, 136, 140, 168, 172, 173, 204, 428): 1, (12, 76, 140, 168, 172, 173, 428): 1, (12, 76, 136, 140, 168, 172, 173): 5, (8, 76, 140, 168, 172, 173): 1, (8, 12, 76, 140, 168, 172, 173, 428): 1, (12, 76, 140, 172, 492, 493): 1}


nodes = []
for i in edges:
    if i[0] not in nodes:
        nodes.append(str(i[0]))
    if i[1] not in nodes:
        nodes.append(str(i[1]))
        
for i in attractors:
    for j in i:
        if j not in nodes:
            nodes.append(str(j))
        
    
G = nx.MultiDiGraph()
G.add_edges_from(edges)
G.add_nodes_from(nodes)

net = Network(directed=True)

net.repulsion()
net.from_nx(G)

for x in attractors:
    for j in x:
        for z in net.nodes:
            if z['id'] == str(j):
                z['color'] = 'red'
                z['size'] = math.sqrt(attractors[x]) * 2


net.show('transitions.html')



