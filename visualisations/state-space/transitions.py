# import
import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
import math
from tarjan_algo import *

G = nx.MultiDiGraph()

edges = [ ('13107995', '13109019'), ('13107995', '15205147'), ('13107995', '46662427'), ('13108059', '13107995'), ('13108569', '13108571'), ('13108569', '13109081'), ('13108569', '13109083'), ('13108571', '13109083'), ('13109017', '13109019'), ('13109017', '13109081'), ('13109017', '46663449'), ('13109019', '13107995'), ('13109019', '13109051'), ('13109019', '15206171'), ('13109019', '15206203'), ('13109019', '46662427'), ('13109019', '46663451'), ('13109051', '14157627'), ('13109051', '16254779'), ('13109081', '13108569'), ('13109081', '13109017'), ('13109081', '13109019'), ('13109081', '13109083'), ('13109081', '46663449'), ('13109081', '46663513'), ('13109083', '13107995'), ('13109083', '13108059'), ('13109083', '13109019'), ('13109145', '13109017'), ('13109145', '13109081'), ('13109145', '13109209'), ('13109147', '13109017'), ('13109201', '13109081'), ('13109209', '13109081'), ('13109209', '13109201'), ('14157595', '13109019'), ('14157595', '13109145'), ('14157627', '16254779'), ('14157721', '13109145'), ('14157723', '13109017'), ('14157723', '13109145'), ('14157723', '13109147'), ('14157723', '14157595'), ('14157723', '14157721'), ('14157755', '14157595'), ('14157755', '14157723'), ('15206171', '15206203'), ('15206203', '16254779'), ('16254779', '14157627'), ('46662427', '13107995'), ('46663449', '13109017'), ('46663449', '46663451'), ('46663449', '46663513'), ('46663451', '13109019'), ('46663451', '46662427'), ('46663513', '13109081'), ('46663513', '46663449'), ('5768634', '5768635'), ('5768634', '6030778'), ('5768635', '14157723'), ('5768635', '14157755'), ('5768635', '5769115'), ('5768635', '5769147'), ('5769115', '14157723'), ('5769147', '14157723'), ('5769147', '14157755'), ('5899706', '5768634'), ('6030762', '6096314'), ('6030778', '5768634'), ('6030778', '6030762'), ('6030778', '6096298'), ('6030778', '6096314'), ('6095914', '6096298'), ('6095914', '6112314'), ('6095914', '6112698'), ('6095914', '6124602'), ('6095914', '6124986'), ('6096298', '6095914'), ('6096298', '6096314'), ('6096298', '6100410'), ('6096298', '6104506'), ('6096298', '6108602'), ('6096298', '6112698'), ('6096298', '6120890'), ('6096298', '6124986'), ('6096314', '6096298'), ('6096314', '6100410'), ('6096314', '6104506'), ('6096314', '6108602'), ('6096314', '6124986'), ('6100410', '6096298'), ('6104506', '6096298'), ('6104506', '6124986'), ('6108602', '6096298'), ('6108602', '6096314'), ('6112314', '6095914'), ('6112698', '6096298'), ('6112698', '6124986'), ('6120890', '6096298'), ('6120890', '6124986'), ('6124602', '6095914'), ('6124986', '6095914'), ('6124986', '6096298'), ('6124986', '6096314'), ('6124986', '6104506'), ('6124986', '6112698'), ('6124986', '6120890'), ('6124986', '6256058'), ('6124986', '8222138'), ('6124986', '8353210'), ('6161850', '5768634'), ('6161850', '5899706'), ('6161850', '6030778'), ('6161850', '8259002'), ('6161850', '8271290'), ('6170042', '6174138'), ('6170042', '6256058'), ('6174138', '6161850'), ('6174138', '6170042'), ('6256058', '6124986'), ('6256058', '6174138'), ('6256058', '8353210'), ('7996858', '5899706'), ('8127930', '6030778'), ('8222138', '8353210'), ('8259002', '5899706'), ('8259002', '6030778'), ('8259002', '6161850'), ('8259002', '7996858'), ('8259002', '8127930'), ('8263098', '8259002'), ('8267194', '8259002'), ('8267194', '8287674'), ('8271290', '8259002'), ('8271290', '8263098'), ('8271290', '8267194'), ('8271290', '8287674'), ('8283578', '8267194'), ('8283578', '8287674'), ('8287674', '8267194'), ('8287674', '8271290'), ('8287674', '8283578'), ('8353210', '6124986'), ('8353210', '6170042'), ('8353210', '8287674'), ]
edge_widths = [ 2.83906, 0.2, 4.41951, 0.2, 2.83906, 1.29861, 1.80944, 2.83906, 1.29861, 2.90805, 0.893147, 3.5322, 2.50259, 0.2, 0.2, 0.2, 0.2, 2.27944, 0.2, 3.37805, 2.50259, 0.2, 1.99176, 0.2, 0.893147, 0.893147, 0.2, 3.29104, 2.27944, 1.29861, 3.4581, 0.2, 0.2, 3.4581, 0.2, 0.2, 0.2, 1.29861, 3.41888, 0.2, 2.76495, 0.2, 0.2, 3.41888, 0.2, 2.68491, 0.2, 0.893147, 1.29861, 4.4485, 0.2, 0.893147, 0.2, 0.893147, 0.2, 0.893147, 0.2, 4.02864, 1.58629, 2.68491, 2.14591, 0.2, 3.37805, 0.2, 2.97259, 2.14591, 3.66574, 0.2, 2.5979, 0.2, 1.29861, 2.68491, 1.29861, 0.2, 0.2, 1.29861, 5.35906, 2.14591, 4.26044, 0.2, 0.2, 1.29861, 1.29861, 1.29861, 6.70129, 4.43411, 0.2, 0.2, 1.29861, 3.19573, 0.893147, 0.893147, 0.2, 0.893147, 1.58629, 0.2, 1.29861, 1.58629, 1.58629, 1.29861, 1.29861, 5.30595, 6.62649, 3.19573, 0.2, 1.29861, 1.29861, 3.14444, 1.99176, 3.9612, 1.80944, 1.29861, 2.97259, 0.893147, 0.2, 0.2, 0.2, 0.2, 0.2, 0.893147, 0.2, 3.03321, 2.90805, 0.893147, 2.14591, 2.83906, 2.14591, 3.49584, 2.83906, 0.893147, 1.29861, 4.09182, 0.893147, 2.50259, 1.29861, 3.14444, 0.2, 2.76495, 0.2, 3.14444, 3.69651, 2.83906, 1.29861, 0.2, 4.34313, ]
nodes = [ '5768634', '5768635', '5769115', '5769147', '5899706', '6030762', '6030778', '6095914', '6096298', '6096314', '6100410', '6104506', '6108602', '6112314', '6112698', '6120890', '6124602', '6124986', '6161850', '6170042', '6174138', '6256058', '7996858', '8127930', '8222138', '8259002', '8263098', '8267194', '8271290', '8283578', '8287674', '8353210', '13107995', '13108059', '13108569', '13108571', '13109017', '13109019', '13109051', '13109081', '13109083', '13109145', '13109147', '13109201', '13109209', '14157595', '14157627', '14157721', '14157723', '14157755', '15205147', '15206171', '15206203', '16254779', '46662427', '46663449', '46663451', '46663513', ]
node_sizes = [ 44.4, 25.2, 0.2, 5.3, 12, 0.2, 29.8, 37.8, 152.6, 30.1, 0.4, 0.6, 1.2, 0.2, 1.8, 1.3, 0.6, 402.9, 6.9, 0.4, 0.4, 6.8, 3.3, 0.6, 1.3, 178.2, 1.2, 45, 10.7, 3, 282.7, 72.6, 841.2, 0.2, 68, 3.8, 14.9, 30.1, 2.7, 117.8, 28.6, 26, 0.2, 0.6, 16.7, 1.2, 200.2, 5.4, 34.2, 3.3, 0.5, 0.2, 0.6, 365.9, 298.4, 2.6, 1.8, 2.6, ]

print(len(edges))


# prune_nodes(nodes, node_sizes, edges, edge_widths)
# prune_edges(edges, edge_widths)




G.add_nodes_from(nodes)

for i in range(len(edges)):
    G.add_edge(edges[i][0], edges[i][1], width = edge_widths[i])


node_d = {}
for i in range(len(nodes)):
    val = math.sqrt(node_sizes[i])
    val = val * 2
    node_d[nodes[i]] = val

nx.set_node_attributes(G, node_d, 'size')

net = Network(directed=True)
net.repulsion()
net.from_nx(G)
net.show('transitions.html')


CellStates(nodes, edges, node_sizes)



# pos = nx.nx_agraph.graphviz_layout(G)
# nx.draw_networkx_nodes(G, pos, node_size = node_sizes)
# nx.draw_networkx_edges(G, pos, edgelist=G.edges(), nodelist=node_sizes) #, width=edge_widths, connectionstyle='arc3, rad = 0.1') #, nodelist=node_sizes)
# nx.draw_networkx_labels(G,pos)
# plt.show()


